Для реализации часов предполагается использовать регистр TSC.

В inc/time.h будут объявлена структура timespec и константы CLOCK_MONOTONIC, CLOCK_REALTIME, CLOCK_PROCESS_CPUTIME_ID

Для реализации CLOCK_MONOTONIC и CLOCK_REALTIME в файле kern/tsc.c будут заведены переменные mono_start типа uint64_t и realtime_start типа int64_t.
Переменная mono_start будет инициализирована значением регистра TSC при запуске ядра.
Переменная realtime_start будет инициализирована значением, возвращаемым функцией gettime, переведённым в количество тактов процессора.

Для реализации CLOCK_PROCESS_CPUTIME_ID в структуру Env будут добавлены новые члены int64_t env_cputime int64_t env_cputime_start.
env_cputime будет изначально инициализироваться нулём, а при каждом переключении с данного процесса на другой туда будет добавляться время в тактах процессора, 
которое прошло с момента переключения на данный процесс.
env_cputime_start будет инициализироваться значением регистра TSC при каждом переключении на данный процесс.
Изменения при переключении будут происходить в функции env_run в kern/env.c

В файле kern/tsc.c будет заведена переменная res, которая будет инициализировна временем одного такта процессора. Такой будет точность всех часов.

В файле kern/tsc.c будут созданы функции
int clock_getres(int clock_id, struct timespec *res);
int clock_gettime(int clock_id, struct timespec *tp);
int clock_settime(int clock_id, const struct timespec *tp);

getres будет записывать по адресу res значение переменной res, описанной выше.

gettime в зависимости от типа будет записывать по адресу tp:
CLOCK_MONOTONIC: разность текущего значения регистра TSC и mono_start, переведённую в секунды и наносекунды
CLOCK_REALTIME: сумму realtime_start и разности текущего значения регистра TSC и mono_start, переведённую в секунды и наносекунды
CLOCK_PROCESS_CPUTIME_ID: сумму curenv->env_cputime и разность текущего значения регистра TSC и curenv->env_cputime_start, переведённую в секунды и наносекунды

clock_settime в зависимости от типа:
CLOCK_MONOTONIC: вернёт ошибку
CLOCK_REALTIME: установит realtime_start как разность заданного значения, переведённого в такты процессора, и разности текущего значения регистра TSC и mono_start.
CLOCK_PROCESS_CPUTIME_ID: установит curenv->env_cputime как разность заданного значения, переведённого в такты процессора, и разности текущего значения регистра TSC и curenv->env_cputime_start.

Для реализации всех вышеназванных функций будут созданы с префиксами sys_ соответствующие системные вызовы в файлах lib/syscall.c и kern/syscall.c

В файле inc/time.h будет создана функция
int clock_nanosleep(int clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp);
и добавлена константа TIMER_ABSTIME

В inc/env.h будет добавлена константа ENV_SLEEPING для обозначения нового состояния процесса.

В структуру Env будут добавлены новые члены int env_sleep_clockid для обозначения часов, по которым отсчитывается время бездействия процесса,
и struct timespec env_wakeup_time для хранения времени "пробуждения" процесса.

В случае передачи в clock_id CLOCK_PROCESS_CPUTIME_ID вернёт ошибку.

При установленном флаге TIMER_ABSTIME функция установит thisenv->env_sleep_clockid идентификатор соответствующих часов, в thisenv->env_wakeup_time время, заданное в rqtp, 
установит  thisenv->env_status в ENV_SLEEPING и вызовет sys_yield()

Если флаг TIMER_ABSTIME не установлен, то будет выполнены действия, аналогичные предыдущему случаю, только в thisenv->env_sleep_clockid будет установлено CLOCK_MONOTONIC,
а в thisenv->env_wakeup_time сумму текущего времени по CLOCK_MONOTONIC и значения, заданного в rqtp.

Для поддержки будет изменена функция sched_yield() в kern/sched.c так, чтобы она могла запускать те процессы с установленным статусом ENV_SLEEPING,
у которых еnv_wakeup_time меньше текущего времени по соответствующим часам.

--------------------ТЕСТЫ--------------------
Реализация тестов представлена в user/itask.c
---------------------------------------------
Для проверки правильности работы часов реального времени:
Сравнивать результаты, полученные sys_clock_gettime(CLOCK_REALTIME, tp) и sys_gettime. Допустимая погрешность - 1 секунда.

Для часов CLOCK_REALTIME и CLOCK_MONOTONIC: сравнивать время, прошедшее с начала большого цикла, полученное по нашим часам и полученное по часам sys_gettime.

Для часов CLOCK_PROCESS_CPUTIME_ID можно проверить монотонность часов относительно процесса: одно и то же количество витков цикла по данным часам должно выполняться примерно за одно и то же время.

Для часов CLOCK_REALTIME, CLOCK_PROCESS_CPUTIME_ID выставлять новое время функцией sys_clock_settime и сравнивать время, полученное после этого с помощью функции sys_clock_gettime c установленным.

Проверки на некорректные аргументы:
- не существующие clock_id,
- отрицательные значения секунд и наносекунд и значения наносекунд, большее 999 999 999 при установке времени,
- попытка установки времени для часов CLOCK_MONOTONIC

Проверка выравнивания значений устанавливаемого времени по значениям, кратным точности часов:
устанавливаем часы на значения, не выравненные по точности, пробуем получить значение времени, проверяем выравнено ли полученное значение.

Для clock_getres получаемые точности для всех трёх часов должны быть одинаковыми.

Для проверки clock_nanosleep:
Для TIMER_ABSTIME сравнение времени по часам, заданным в clock_id, и времени, заданного в rqtp.
Для не установленного TIMER_ABSTIME сравнение времени, прошедшего по соответствующим часам, со значением в rqtp.

В параллельном процессе во время выполнения clock_nanosleep поменять время с помощью sys_clock_settime.
На TIMER_ABSTIME это должно оказать влияние, если не устанавливать TIMER_ABSTIME, то влияния быть не должно.

При попытке вызвать clock_nanosleep с часами CLOCK_PROCESS_CPUTIME_ID должна возвращаться ошибка.